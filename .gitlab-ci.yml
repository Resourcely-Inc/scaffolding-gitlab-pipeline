# This CI/CD configuration leverages the official Hashicorp Terraform Container Images
# https://hub.docker.com/r/hashicorp/terraform/ to perform the following:
# 1. Initialize a working directory containing Terraform configuration files
# 2. Validate the Terraform configuration files
# 3. Create a Terraform plan from the configuration

# When a merge-request is created, after the plan stage completes, the Resourcely guardrail validation job
# https://github.com/Resourcely-Inc/resourcely-gitlab-template is kickoff in the test stage and validates
# the plan against your configured Resourcely guardrails

# Requires the following private variables to be configured:
# RESOURCELY_API_TOKEN: Your Resourcely API Token

stages:
  - validate
  - plan
  - test

variables:
  TF_PLAN_DIRECTORY: $CI_PROJECT_DIR

include:
  - remote: 'https://raw.githubusercontent.com/Resourcely-Inc/resourcely-gitlab-template/main/.resourcely.gitlab-ci.yml'

validate:
  stage: validate
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]
  before_script:
    - terraform init
  script:
    - terraform validate

plan:
  stage: plan
  image:
    name: hashicorp/terraform:light
    entrypoint: [""]
  before_script:
    - terraform init
  script:
    - terraform plan -out=$TF_PLAN_DIRECTORY/plan.tfplan
    - terraform show -json $TF_PLAN_DIRECTORY/plan.tfplan > plan.json
  artifacts:
    paths:
      - $TF_PLAN_DIRECTORY/*